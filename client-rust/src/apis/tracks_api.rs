/*
 * SoundCloud Public API Specification
 *
 * Swagger json can be found [here](https://developers.soundcloud.com/docs/api/explorer/api.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`tracks_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TracksPostError {
    Status400(models::Error),
    Status401(models::Error),
    Status422(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tracks_track_id_comments_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TracksTrackIdCommentsGetError {
    Status401(models::Error),
    Status404(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tracks_track_id_comments_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TracksTrackIdCommentsPostError {
    Status422(models::Error),
    Status429(models::TooManyRequests),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tracks_track_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TracksTrackIdDeleteError {
    Status404(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tracks_track_id_favoriters_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TracksTrackIdFavoritersGetError {
    Status401(models::Error),
    Status404(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tracks_track_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TracksTrackIdGetError {
    Status401(models::Error),
    Status404(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tracks_track_id_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TracksTrackIdPutError {
    Status400(models::Error),
    Status401(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tracks_track_id_related_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TracksTrackIdRelatedGetError {
    Status401(models::Error),
    Status404(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tracks_track_id_reposters_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TracksTrackIdRepostersGetError {
    Status401(models::Error),
    Status404(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tracks_track_id_streams_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TracksTrackIdStreamsGetError {
    Status401(models::Error),
    Status404(models::Error),
    UnknownValue(serde_json::Value),
}


pub async fn tracks_post(configuration: &configuration::Configuration, track_left_square_bracket_title_right_square_bracket: Option<&str>, track_left_square_bracket_asset_data_right_square_bracket: Option<std::path::PathBuf>, track_left_square_bracket_permalink_right_square_bracket: Option<&str>, track_left_square_bracket_sharing_right_square_bracket: Option<&str>, track_left_square_bracket_embeddable_by_right_square_bracket: Option<&str>, track_left_square_bracket_purchase_url_right_square_bracket: Option<&str>, track_left_square_bracket_description_right_square_bracket: Option<&str>, track_left_square_bracket_genre_right_square_bracket: Option<&str>, track_left_square_bracket_tag_list_right_square_bracket: Option<&str>, track_left_square_bracket_label_name_right_square_bracket: Option<&str>, track_left_square_bracket_release_right_square_bracket: Option<&str>, track_left_square_bracket_release_date_right_square_bracket: Option<&str>, track_left_square_bracket_streamable_right_square_bracket: Option<bool>, track_left_square_bracket_downloadable_right_square_bracket: Option<bool>, track_left_square_bracket_license_right_square_bracket: Option<&str>, track_left_square_bracket_commentable_right_square_bracket: Option<bool>, track_left_square_bracket_isrc_right_square_bracket: Option<&str>, track_left_square_bracket_artwork_data_right_square_bracket: Option<std::path::PathBuf>) -> Result<models::Track, Error<TracksPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_track_left_square_bracket_title_right_square_bracket = track_left_square_bracket_title_right_square_bracket;
    let p_track_left_square_bracket_asset_data_right_square_bracket = track_left_square_bracket_asset_data_right_square_bracket;
    let p_track_left_square_bracket_permalink_right_square_bracket = track_left_square_bracket_permalink_right_square_bracket;
    let p_track_left_square_bracket_sharing_right_square_bracket = track_left_square_bracket_sharing_right_square_bracket;
    let p_track_left_square_bracket_embeddable_by_right_square_bracket = track_left_square_bracket_embeddable_by_right_square_bracket;
    let p_track_left_square_bracket_purchase_url_right_square_bracket = track_left_square_bracket_purchase_url_right_square_bracket;
    let p_track_left_square_bracket_description_right_square_bracket = track_left_square_bracket_description_right_square_bracket;
    let p_track_left_square_bracket_genre_right_square_bracket = track_left_square_bracket_genre_right_square_bracket;
    let p_track_left_square_bracket_tag_list_right_square_bracket = track_left_square_bracket_tag_list_right_square_bracket;
    let p_track_left_square_bracket_label_name_right_square_bracket = track_left_square_bracket_label_name_right_square_bracket;
    let p_track_left_square_bracket_release_right_square_bracket = track_left_square_bracket_release_right_square_bracket;
    let p_track_left_square_bracket_release_date_right_square_bracket = track_left_square_bracket_release_date_right_square_bracket;
    let p_track_left_square_bracket_streamable_right_square_bracket = track_left_square_bracket_streamable_right_square_bracket;
    let p_track_left_square_bracket_downloadable_right_square_bracket = track_left_square_bracket_downloadable_right_square_bracket;
    let p_track_left_square_bracket_license_right_square_bracket = track_left_square_bracket_license_right_square_bracket;
    let p_track_left_square_bracket_commentable_right_square_bracket = track_left_square_bracket_commentable_right_square_bracket;
    let p_track_left_square_bracket_isrc_right_square_bracket = track_left_square_bracket_isrc_right_square_bracket;
    let p_track_left_square_bracket_artwork_data_right_square_bracket = track_left_square_bracket_artwork_data_right_square_bracket;

    let uri_str = format!("{}/tracks", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut multipart_form = reqwest::multipart::Form::new();
    if let Some(param_value) = p_track_left_square_bracket_title_right_square_bracket {
        multipart_form = multipart_form.text("track[title]", param_value.to_string());
    }
    // TODO: support file upload for 'track[asset_data]' parameter
    if let Some(param_value) = p_track_left_square_bracket_permalink_right_square_bracket {
        multipart_form = multipart_form.text("track[permalink]", param_value.to_string());
    }
    if let Some(param_value) = p_track_left_square_bracket_sharing_right_square_bracket {
        multipart_form = multipart_form.text("track[sharing]", param_value.to_string());
    }
    if let Some(param_value) = p_track_left_square_bracket_embeddable_by_right_square_bracket {
        multipart_form = multipart_form.text("track[embeddable_by]", param_value.to_string());
    }
    if let Some(param_value) = p_track_left_square_bracket_purchase_url_right_square_bracket {
        multipart_form = multipart_form.text("track[purchase_url]", param_value.to_string());
    }
    if let Some(param_value) = p_track_left_square_bracket_description_right_square_bracket {
        multipart_form = multipart_form.text("track[description]", param_value.to_string());
    }
    if let Some(param_value) = p_track_left_square_bracket_genre_right_square_bracket {
        multipart_form = multipart_form.text("track[genre]", param_value.to_string());
    }
    if let Some(param_value) = p_track_left_square_bracket_tag_list_right_square_bracket {
        multipart_form = multipart_form.text("track[tag_list]", param_value.to_string());
    }
    if let Some(param_value) = p_track_left_square_bracket_label_name_right_square_bracket {
        multipart_form = multipart_form.text("track[label_name]", param_value.to_string());
    }
    if let Some(param_value) = p_track_left_square_bracket_release_right_square_bracket {
        multipart_form = multipart_form.text("track[release]", param_value.to_string());
    }
    if let Some(param_value) = p_track_left_square_bracket_release_date_right_square_bracket {
        multipart_form = multipart_form.text("track[release_date]", param_value.to_string());
    }
    if let Some(param_value) = p_track_left_square_bracket_streamable_right_square_bracket {
        multipart_form = multipart_form.text("track[streamable]", param_value.to_string());
    }
    if let Some(param_value) = p_track_left_square_bracket_downloadable_right_square_bracket {
        multipart_form = multipart_form.text("track[downloadable]", param_value.to_string());
    }
    if let Some(param_value) = p_track_left_square_bracket_license_right_square_bracket {
        multipart_form = multipart_form.text("track[license]", param_value.to_string());
    }
    if let Some(param_value) = p_track_left_square_bracket_commentable_right_square_bracket {
        multipart_form = multipart_form.text("track[commentable]", param_value.to_string());
    }
    if let Some(param_value) = p_track_left_square_bracket_isrc_right_square_bracket {
        multipart_form = multipart_form.text("track[isrc]", param_value.to_string());
    }
    // TODO: support file upload for 'track[artwork_data]' parameter
    req_builder = req_builder.multipart(multipart_form);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Track`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Track`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TracksPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn tracks_track_id_comments_get(configuration: &configuration::Configuration, track_id: i32, limit: Option<i32>, offset: Option<i32>, linked_partitioning: Option<bool>) -> Result<models::Comments, Error<TracksTrackIdCommentsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_track_id = track_id;
    let p_limit = limit;
    let p_offset = offset;
    let p_linked_partitioning = linked_partitioning;

    let uri_str = format!("{}/tracks/{track_id}/comments", configuration.base_path, track_id=p_track_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_linked_partitioning {
        req_builder = req_builder.query(&[("linked_partitioning", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Comments`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Comments`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TracksTrackIdCommentsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn tracks_track_id_comments_post(configuration: &configuration::Configuration, track_id: i32, tracks_track_id_comments_post_request: models::TracksTrackIdCommentsPostRequest) -> Result<models::Comment, Error<TracksTrackIdCommentsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_track_id = track_id;
    let p_tracks_track_id_comments_post_request = tracks_track_id_comments_post_request;

    let uri_str = format!("{}/tracks/{track_id}/comments", configuration.base_path, track_id=p_track_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_tracks_track_id_comments_post_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Comment`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Comment`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TracksTrackIdCommentsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn tracks_track_id_delete(configuration: &configuration::Configuration, track_id: i32) -> Result<(), Error<TracksTrackIdDeleteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_track_id = track_id;

    let uri_str = format!("{}/tracks/{track_id}", configuration.base_path, track_id=p_track_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<TracksTrackIdDeleteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn tracks_track_id_favoriters_get(configuration: &configuration::Configuration, track_id: i32, limit: Option<i32>, linked_partitioning: Option<bool>) -> Result<models::Users, Error<TracksTrackIdFavoritersGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_track_id = track_id;
    let p_limit = limit;
    let p_linked_partitioning = linked_partitioning;

    let uri_str = format!("{}/tracks/{track_id}/favoriters", configuration.base_path, track_id=p_track_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_linked_partitioning {
        req_builder = req_builder.query(&[("linked_partitioning", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Users`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Users`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TracksTrackIdFavoritersGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn tracks_track_id_get(configuration: &configuration::Configuration, track_id: i32, secret_token: Option<&str>) -> Result<models::Track, Error<TracksTrackIdGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_track_id = track_id;
    let p_secret_token = secret_token;

    let uri_str = format!("{}/tracks/{track_id}", configuration.base_path, track_id=p_track_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_secret_token {
        req_builder = req_builder.query(&[("secret_token", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Track`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Track`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TracksTrackIdGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn tracks_track_id_put(configuration: &configuration::Configuration, track_id: i32, track_metadata_request: Option<models::TrackMetadataRequest>) -> Result<models::Track, Error<TracksTrackIdPutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_track_id = track_id;
    let p_track_metadata_request = track_metadata_request;

    let uri_str = format!("{}/tracks/{track_id}", configuration.base_path, track_id=p_track_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_track_metadata_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Track`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Track`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TracksTrackIdPutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn tracks_track_id_related_get(configuration: &configuration::Configuration, track_id: i32, access: Option<Vec<String>>, limit: Option<i32>, offset: Option<i32>, linked_partitioning: Option<bool>) -> Result<models::MeLikesTracksGet200Response, Error<TracksTrackIdRelatedGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_track_id = track_id;
    let p_access = access;
    let p_limit = limit;
    let p_offset = offset;
    let p_linked_partitioning = linked_partitioning;

    let uri_str = format!("{}/tracks/{track_id}/related", configuration.base_path, track_id=p_track_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_access {
        req_builder = match "csv" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("access".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("access", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_linked_partitioning {
        req_builder = req_builder.query(&[("linked_partitioning", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MeLikesTracksGet200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MeLikesTracksGet200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TracksTrackIdRelatedGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn tracks_track_id_reposters_get(configuration: &configuration::Configuration, track_id: i32, limit: Option<i32>) -> Result<models::Users, Error<TracksTrackIdRepostersGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_track_id = track_id;
    let p_limit = limit;

    let uri_str = format!("{}/tracks/{track_id}/reposters", configuration.base_path, track_id=p_track_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Users`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Users`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TracksTrackIdRepostersGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn tracks_track_id_streams_get(configuration: &configuration::Configuration, track_id: i32, secret_token: Option<&str>) -> Result<models::Streams, Error<TracksTrackIdStreamsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_track_id = track_id;
    let p_secret_token = secret_token;

    let uri_str = format!("{}/tracks/{track_id}/streams", configuration.base_path, track_id=p_track_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_secret_token {
        req_builder = req_builder.query(&[("secret_token", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Streams`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Streams`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TracksTrackIdStreamsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

