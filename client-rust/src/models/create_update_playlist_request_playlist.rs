/*
 * SoundCloud Public API Specification
 *
 * Swagger json can be found [here](https://developers.soundcloud.com/docs/api/explorer/api.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateUpdatePlaylistRequestPlaylist {
    /// Title of the playlist
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// Description of the playlist
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// public or private
    #[serde(rename = "sharing", skip_serializing_if = "Option::is_none")]
    pub sharing: Option<Sharing>,
    /// List of tracks to add to playlist
    #[serde(rename = "tracks", skip_serializing_if = "Option::is_none")]
    pub tracks: Option<Vec<models::CreateUpdatePlaylistRequestPlaylistTracksInner>>,
    #[serde(rename = "artwork_data", skip_serializing_if = "Option::is_none")]
    pub artwork_data: Option<std::path::PathBuf>,
    /// The European Article Number
    #[serde(rename = "ean", skip_serializing_if = "Option::is_none")]
    pub ean: Option<String>,
    /// Playlist's genre
    #[serde(rename = "genre", skip_serializing_if = "Option::is_none")]
    pub genre: Option<String>,
    /// Label name
    #[serde(rename = "label_name", skip_serializing_if = "Option::is_none")]
    pub label_name: Option<String>,
    /// License number
    #[serde(rename = "license", skip_serializing_if = "Option::is_none")]
    pub license: Option<String>,
    /// Playlist's permalink
    #[serde(rename = "permalink", skip_serializing_if = "Option::is_none")]
    pub permalink: Option<String>,
    /// Full permalink URL
    #[serde(rename = "permalink_url", skip_serializing_if = "Option::is_none")]
    pub permalink_url: Option<String>,
    /// Purchase title
    #[serde(rename = "purchase_title", skip_serializing_if = "Option::is_none")]
    pub purchase_title: Option<String>,
    /// Purchase URL
    #[serde(rename = "purchase_url", skip_serializing_if = "Option::is_none")]
    pub purchase_url: Option<String>,
    /// Playlist's release
    #[serde(rename = "release", skip_serializing_if = "Option::is_none")]
    pub release: Option<String>,
    /// Release date
    #[serde(rename = "release_date", skip_serializing_if = "Option::is_none")]
    pub release_date: Option<String>,
    /// Playlist or album type
    #[serde(rename = "set_type", skip_serializing_if = "Option::is_none")]
    pub set_type: Option<SetType>,
    /// A comma-separated list of tags
    #[serde(rename = "tag_list", skip_serializing_if = "Option::is_none")]
    pub tag_list: Option<String>,
}

impl CreateUpdatePlaylistRequestPlaylist {
    pub fn new() -> CreateUpdatePlaylistRequestPlaylist {
        CreateUpdatePlaylistRequestPlaylist {
            title: None,
            description: None,
            sharing: None,
            tracks: None,
            artwork_data: None,
            ean: None,
            genre: None,
            label_name: None,
            license: None,
            permalink: None,
            permalink_url: None,
            purchase_title: None,
            purchase_url: None,
            release: None,
            release_date: None,
            set_type: None,
            tag_list: None,
        }
    }
}
/// public or private
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Sharing {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "private")]
    Private,
}

impl Default for Sharing {
    fn default() -> Sharing {
        Self::Public
    }
}
/// Playlist or album type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SetType {
    #[serde(rename = "album")]
    Album,
    #[serde(rename = "playlist")]
    Playlist,
}

impl Default for SetType {
    fn default() -> SetType {
        Self::Album
    }
}

