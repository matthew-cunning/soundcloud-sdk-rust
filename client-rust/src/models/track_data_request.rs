/*
 * SoundCloud Public API Specification
 *
 * Swagger json can be found [here](https://developers.soundcloud.com/docs/api/explorer/api.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrackDataRequest {
    #[serde(rename = "track[title]", skip_serializing_if = "Option::is_none")]
    pub track_left_square_bracket_title_right_square_bracket: Option<String>,
    #[serde(rename = "track[asset_data]", skip_serializing_if = "Option::is_none")]
    pub track_left_square_bracket_asset_data_right_square_bracket: Option<std::path::PathBuf>,
    #[serde(rename = "track[permalink]", skip_serializing_if = "Option::is_none")]
    pub track_left_square_bracket_permalink_right_square_bracket: Option<String>,
    #[serde(rename = "track[sharing]", skip_serializing_if = "Option::is_none")]
    pub track_left_square_bracket_sharing_right_square_bracket: Option<TrackLeftSquareBracketSharingRightSquareBracket>,
    /// who can embed this track \"all\", \"me\", or \"none\"
    #[serde(rename = "track[embeddable_by]", skip_serializing_if = "Option::is_none")]
    pub track_left_square_bracket_embeddable_by_right_square_bracket: Option<TrackLeftSquareBracketEmbeddableByRightSquareBracket>,
    #[serde(rename = "track[purchase_url]", skip_serializing_if = "Option::is_none")]
    pub track_left_square_bracket_purchase_url_right_square_bracket: Option<String>,
    #[serde(rename = "track[description]", skip_serializing_if = "Option::is_none")]
    pub track_left_square_bracket_description_right_square_bracket: Option<String>,
    #[serde(rename = "track[genre]", skip_serializing_if = "Option::is_none")]
    pub track_left_square_bracket_genre_right_square_bracket: Option<String>,
    /// The tag_list property contains a list of tags separated by spaces. Multiword tags are quoted in double quotes. We also support machine tags that follow the pattern NAMESPACE:KEY=VALUE. For example: geo:lat=43.555 camel:size=medium “machine:tag=with space” Machine tags are not revealed to the user on the track pages.
    #[serde(rename = "track[tag_list]", skip_serializing_if = "Option::is_none")]
    pub track_left_square_bracket_tag_list_right_square_bracket: Option<String>,
    #[serde(rename = "track[label_name]", skip_serializing_if = "Option::is_none")]
    pub track_left_square_bracket_label_name_right_square_bracket: Option<String>,
    #[serde(rename = "track[release]", skip_serializing_if = "Option::is_none")]
    pub track_left_square_bracket_release_right_square_bracket: Option<String>,
    /// string, formatted as yyyy-mm-dd, representing release date
    #[serde(rename = "track[release_date]", skip_serializing_if = "Option::is_none")]
    pub track_left_square_bracket_release_date_right_square_bracket: Option<String>,
    #[serde(rename = "track[streamable]", skip_serializing_if = "Option::is_none")]
    pub track_left_square_bracket_streamable_right_square_bracket: Option<bool>,
    #[serde(rename = "track[downloadable]", skip_serializing_if = "Option::is_none")]
    pub track_left_square_bracket_downloadable_right_square_bracket: Option<bool>,
    /// Possible values: no-rights-reserved, all-rights-reserved, cc-by, cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
    #[serde(rename = "track[license]", skip_serializing_if = "Option::is_none")]
    pub track_left_square_bracket_license_right_square_bracket: Option<TrackLeftSquareBracketLicenseRightSquareBracket>,
    #[serde(rename = "track[commentable]", skip_serializing_if = "Option::is_none")]
    pub track_left_square_bracket_commentable_right_square_bracket: Option<bool>,
    #[serde(rename = "track[isrc]", skip_serializing_if = "Option::is_none")]
    pub track_left_square_bracket_isrc_right_square_bracket: Option<String>,
    #[serde(rename = "track[artwork_data]", skip_serializing_if = "Option::is_none")]
    pub track_left_square_bracket_artwork_data_right_square_bracket: Option<std::path::PathBuf>,
}

impl TrackDataRequest {
    pub fn new() -> TrackDataRequest {
        TrackDataRequest {
            track_left_square_bracket_title_right_square_bracket: None,
            track_left_square_bracket_asset_data_right_square_bracket: None,
            track_left_square_bracket_permalink_right_square_bracket: None,
            track_left_square_bracket_sharing_right_square_bracket: None,
            track_left_square_bracket_embeddable_by_right_square_bracket: None,
            track_left_square_bracket_purchase_url_right_square_bracket: None,
            track_left_square_bracket_description_right_square_bracket: None,
            track_left_square_bracket_genre_right_square_bracket: None,
            track_left_square_bracket_tag_list_right_square_bracket: None,
            track_left_square_bracket_label_name_right_square_bracket: None,
            track_left_square_bracket_release_right_square_bracket: None,
            track_left_square_bracket_release_date_right_square_bracket: None,
            track_left_square_bracket_streamable_right_square_bracket: None,
            track_left_square_bracket_downloadable_right_square_bracket: None,
            track_left_square_bracket_license_right_square_bracket: None,
            track_left_square_bracket_commentable_right_square_bracket: None,
            track_left_square_bracket_isrc_right_square_bracket: None,
            track_left_square_bracket_artwork_data_right_square_bracket: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TrackLeftSquareBracketSharingRightSquareBracket {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "private")]
    Private,
}

impl Default for TrackLeftSquareBracketSharingRightSquareBracket {
    fn default() -> TrackLeftSquareBracketSharingRightSquareBracket {
        Self::Public
    }
}
/// who can embed this track \"all\", \"me\", or \"none\"
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TrackLeftSquareBracketEmbeddableByRightSquareBracket {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "me")]
    Me,
    #[serde(rename = "none")]
    None,
}

impl Default for TrackLeftSquareBracketEmbeddableByRightSquareBracket {
    fn default() -> TrackLeftSquareBracketEmbeddableByRightSquareBracket {
        Self::All
    }
}
/// Possible values: no-rights-reserved, all-rights-reserved, cc-by, cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TrackLeftSquareBracketLicenseRightSquareBracket {
    #[serde(rename = "no-rights-reserved")]
    NoRightsReserved,
    #[serde(rename = "all-rights-reserved")]
    AllRightsReserved,
    #[serde(rename = "cc-by")]
    CcBy,
    #[serde(rename = "cc-by-nc")]
    CcByNc,
    #[serde(rename = "cc-by-nd")]
    CcByNd,
    #[serde(rename = "cc-by-sa")]
    CcBySa,
    #[serde(rename = "cc-by-nc-nd")]
    CcByNcNd,
    #[serde(rename = "cc-by-nc-sa")]
    CcByNcSa,
}

impl Default for TrackLeftSquareBracketLicenseRightSquareBracket {
    fn default() -> TrackLeftSquareBracketLicenseRightSquareBracket {
        Self::NoRightsReserved
    }
}

