/*
 * SoundCloud Public API Specification
 *
 * Swagger json can be found [here](https://developers.soundcloud.com/docs/api/explorer/api.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ActivitiesItemsInnerOrigin : Origin.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ActivitiesItemsInnerOrigin {
    /// Playlist title.
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// URL to a JPEG image.
    #[serde(rename = "artwork_url", skip_serializing_if = "Option::is_none")]
    pub artwork_url: Option<String>,
    /// Tempo.
    #[serde(rename = "bpm", skip_serializing_if = "Option::is_none")]
    pub bpm: Option<i32>,
    /// Number of comments.
    #[serde(rename = "comment_count", skip_serializing_if = "Option::is_none")]
    pub comment_count: Option<i32>,
    /// Is commentable.
    #[serde(rename = "commentable", skip_serializing_if = "Option::is_none")]
    pub commentable: Option<bool>,
    /// Created timestamp.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Playlist description.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// NUmber of downloads.
    #[serde(rename = "download_count", skip_serializing_if = "Option::is_none")]
    pub download_count: Option<i32>,
    /// is downloadable.
    #[serde(rename = "downloadable", skip_serializing_if = "Option::is_none")]
    pub downloadable: Option<bool>,
    /// Playlist duration.
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    /// Embeddable by.
    #[serde(rename = "embeddable_by", skip_serializing_if = "Option::is_none")]
    pub embeddable_by: Option<String>,
    /// Number of favoritings.
    #[serde(rename = "favoritings_count", skip_serializing_if = "Option::is_none")]
    pub favoritings_count: Option<i32>,
    /// Playlist genre.
    #[serde(rename = "genre", skip_serializing_if = "Option::is_none")]
    pub genre: Option<String>,
    /// Playlist identifier.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// ISRC code.
    #[serde(rename = "isrc", skip_serializing_if = "Option::is_none")]
    pub isrc: Option<String>,
    /// Key signature.
    #[serde(rename = "key_signature", skip_serializing_if = "Option::is_none")]
    pub key_signature: Option<String>,
    /// Type of Soundcloud object (playlist).
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Label name.
    #[serde(rename = "label_name", skip_serializing_if = "Option::is_none")]
    pub label_name: Option<String>,
    /// License.
    #[serde(rename = "license", skip_serializing_if = "Option::is_none")]
    pub license: Option<String>,
    /// Optional artist name, when different from user.
    #[serde(rename = "metadata_artist", skip_serializing_if = "Option::is_none")]
    pub metadata_artist: Option<String>,
    /// Playlist permalink URL.
    #[serde(rename = "permalink_url", skip_serializing_if = "Option::is_none")]
    pub permalink_url: Option<String>,
    /// Number of plays.
    #[serde(rename = "playback_count", skip_serializing_if = "Option::is_none")]
    pub playback_count: Option<i32>,
    /// Purchase title.
    #[serde(rename = "purchase_title", skip_serializing_if = "Option::is_none")]
    pub purchase_title: Option<String>,
    /// Purchase URL.
    #[serde(rename = "purchase_url", skip_serializing_if = "Option::is_none")]
    pub purchase_url: Option<String>,
    /// Release.
    #[serde(rename = "release", skip_serializing_if = "Option::is_none")]
    pub release: Option<String>,
    /// Day of release.
    #[serde(rename = "release_day", skip_serializing_if = "Option::is_none")]
    pub release_day: Option<i32>,
    /// Month of release.
    #[serde(rename = "release_month", skip_serializing_if = "Option::is_none")]
    pub release_month: Option<i32>,
    /// Year of release.
    #[serde(rename = "release_year", skip_serializing_if = "Option::is_none")]
    pub release_year: Option<i32>,
    /// Type of sharing (private/public).
    #[serde(rename = "sharing", skip_serializing_if = "Option::is_none")]
    pub sharing: Option<String>,
    /// URL to stream.
    #[serde(rename = "stream_url", skip_serializing_if = "Option::is_none")]
    pub stream_url: Option<String>,
    /// Is streamable.
    #[serde(rename = "streamable", skip_serializing_if = "Option::is_none")]
    pub streamable: Option<bool>,
    /// Tags.
    #[serde(rename = "tag_list", skip_serializing_if = "Option::is_none")]
    pub tag_list: Option<String>,
    /// Playlist URI.
    #[serde(rename = "uri", skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    #[serde(rename = "user", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user: Option<Option<Box<models::User>>>,
    /// Is user's favourite.
    #[serde(rename = "user_favorite", skip_serializing_if = "Option::is_none")]
    pub user_favorite: Option<bool>,
    /// Number of plays by a user.
    #[serde(rename = "user_playback_count", skip_serializing_if = "Option::is_none")]
    pub user_playback_count: Option<i32>,
    /// Waveform URL.
    #[serde(rename = "waveform_url", skip_serializing_if = "Option::is_none")]
    pub waveform_url: Option<String>,
    /// List of countries where track is available.
    #[serde(rename = "available_country_codes", skip_serializing_if = "Option::is_none")]
    pub available_country_codes: Option<String>,
    /// Level of access the user (logged in or anonymous) has to the track.   * `playable` - user is allowed to listen to a full track.   * `preview` - user is allowed to preview a track, meaning a snippet is available   * `blocked` - user can only see the metadata of a track, no streaming is possible 
    #[serde(rename = "access", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub access: Option<Option<Access>>,
    /// URL to download a track.
    #[serde(rename = "download_url", skip_serializing_if = "Option::is_none")]
    pub download_url: Option<String>,
    /// Number of reposts.
    #[serde(rename = "reposts_count", skip_serializing_if = "Option::is_none")]
    pub reposts_count: Option<i32>,
    /// Secret URL.
    #[serde(rename = "secret_uri", skip_serializing_if = "Option::is_none")]
    pub secret_uri: Option<String>,
    /// European Article Number.
    #[serde(rename = "ean", skip_serializing_if = "Option::is_none")]
    pub ean: Option<String>,
    /// Label user identifier.
    #[serde(rename = "label_id", skip_serializing_if = "Option::is_none")]
    pub label_id: Option<i32>,
    /// Last modified timestamp.
    #[serde(rename = "last_modified", skip_serializing_if = "Option::is_none")]
    pub last_modified: Option<String>,
    /// Playlist permalink.
    #[serde(rename = "permalink", skip_serializing_if = "Option::is_none")]
    pub permalink: Option<String>,
    /// Type of playlist.
    #[serde(rename = "playlist_type", skip_serializing_if = "Option::is_none")]
    pub playlist_type: Option<String>,
    /// Count of tracks.
    #[serde(rename = "track_count", skip_serializing_if = "Option::is_none")]
    pub track_count: Option<i32>,
    /// List of tracks.
    #[serde(rename = "tracks", skip_serializing_if = "Option::is_none")]
    pub tracks: Option<Vec<models::Track>>,
    /// Playlist type.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// User identifier.
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i32>,
    /// Count of playlist likes.
    #[serde(rename = "likes_count", skip_serializing_if = "Option::is_none")]
    pub likes_count: Option<i32>,
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<Box<models::PlaylistLabel>>,
    /// tracks URI.
    #[serde(rename = "tracks_uri", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tracks_uri: Option<Option<String>>,
    /// Tags.
    #[serde(rename = "tags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Option<String>>,
}

impl ActivitiesItemsInnerOrigin {
    /// Origin.
    pub fn new() -> ActivitiesItemsInnerOrigin {
        ActivitiesItemsInnerOrigin {
            title: None,
            artwork_url: None,
            bpm: None,
            comment_count: None,
            commentable: None,
            created_at: None,
            description: None,
            download_count: None,
            downloadable: None,
            duration: None,
            embeddable_by: None,
            favoritings_count: None,
            genre: None,
            id: None,
            isrc: None,
            key_signature: None,
            kind: None,
            label_name: None,
            license: None,
            metadata_artist: None,
            permalink_url: None,
            playback_count: None,
            purchase_title: None,
            purchase_url: None,
            release: None,
            release_day: None,
            release_month: None,
            release_year: None,
            sharing: None,
            stream_url: None,
            streamable: None,
            tag_list: None,
            uri: None,
            user: None,
            user_favorite: None,
            user_playback_count: None,
            waveform_url: None,
            available_country_codes: None,
            access: None,
            download_url: None,
            reposts_count: None,
            secret_uri: None,
            ean: None,
            label_id: None,
            last_modified: None,
            permalink: None,
            playlist_type: None,
            track_count: None,
            tracks: None,
            r#type: None,
            user_id: None,
            likes_count: None,
            label: None,
            tracks_uri: None,
            tags: None,
        }
    }
}
/// Level of access the user (logged in or anonymous) has to the track.   * `playable` - user is allowed to listen to a full track.   * `preview` - user is allowed to preview a track, meaning a snippet is available   * `blocked` - user can only see the metadata of a track, no streaming is possible 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Access {
    #[serde(rename = "playable")]
    Playable,
    #[serde(rename = "preview")]
    Preview,
    #[serde(rename = "blocked")]
    Blocked,
}

impl Default for Access {
    fn default() -> Access {
        Self::Playable
    }
}

