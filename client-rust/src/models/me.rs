/*
 * SoundCloud Public API Specification
 *
 * Swagger json can be found [here](https://developers.soundcloud.com/docs/api/explorer/api.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Me : SoundCloud Me object
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Me {
    /// URL to a JPEG image.
    #[serde(rename = "avatar_url", skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    /// city.
    #[serde(rename = "city", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    /// comments count. From now on, the field always has a `0` value.
    #[serde(rename = "comments_count", skip_serializing_if = "Option::is_none")]
    pub comments_count: Option<i32>,
    /// country.
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// created at date
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// description.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// discogs name.
    #[serde(rename = "discogs_name", skip_serializing_if = "Option::is_none")]
    pub discogs_name: Option<String>,
    /// first name.
    #[serde(rename = "first_name", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    /// number of followers.
    #[serde(rename = "followers_count", skip_serializing_if = "Option::is_none")]
    pub followers_count: Option<i32>,
    /// number of followed users.
    #[serde(rename = "followings_count", skip_serializing_if = "Option::is_none")]
    pub followings_count: Option<i32>,
    /// first and last name.
    #[serde(rename = "full_name", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    /// unique identifier
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// kind of resource.
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// last modified timestamp.
    #[serde(rename = "last_modified", skip_serializing_if = "Option::is_none")]
    pub last_modified: Option<String>,
    /// last name.
    #[serde(rename = "last_name", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    /// likes count.
    #[serde(rename = "likes_count", skip_serializing_if = "Option::is_none")]
    pub likes_count: Option<i32>,
    /// locale.
    #[serde(rename = "locale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub locale: Option<Option<String>>,
    /// online.
    #[serde(rename = "online", skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
    /// myspace name
    #[serde(rename = "myspace_name", skip_serializing_if = "Option::is_none")]
    pub myspace_name: Option<String>,
    /// permalink of the resource.
    #[serde(rename = "permalink", skip_serializing_if = "Option::is_none")]
    pub permalink: Option<String>,
    /// URL to the SoundCloud.com page.
    #[serde(rename = "permalink_url", skip_serializing_if = "Option::is_none")]
    pub permalink_url: Option<String>,
    /// subscription plan of the user.
    #[serde(rename = "plan", skip_serializing_if = "Option::is_none")]
    pub plan: Option<String>,
    /// number of public playlists.
    #[serde(rename = "playlist_count", skip_serializing_if = "Option::is_none")]
    pub playlist_count: Option<i32>,
    /// boolean if email is confirmed.
    #[serde(rename = "primary_email_confirmed", skip_serializing_if = "Option::is_none")]
    pub primary_email_confirmed: Option<bool>,
    /// number of private playlists.
    #[serde(rename = "private_playlists_count", skip_serializing_if = "Option::is_none")]
    pub private_playlists_count: Option<i32>,
    /// number of private tracks.
    #[serde(rename = "private_tracks_count", skip_serializing_if = "Option::is_none")]
    pub private_tracks_count: Option<i32>,
    /// number of favorited public tracks
    #[serde(rename = "public_favorites_count", skip_serializing_if = "Option::is_none")]
    pub public_favorites_count: Option<i32>,
    #[serde(rename = "quota", skip_serializing_if = "Option::is_none")]
    pub quota: Option<Box<models::MeQuota>>,
    /// number of reposts from user
    #[serde(rename = "reposts_count", skip_serializing_if = "Option::is_none")]
    pub reposts_count: Option<i32>,
    /// a list subscriptions associated with the user
    #[serde(rename = "subscriptions", skip_serializing_if = "Option::is_none")]
    pub subscriptions: Option<Vec<models::MeSubscriptionsInner>>,
    /// number of public tracks.
    #[serde(rename = "track_count", skip_serializing_if = "Option::is_none")]
    pub track_count: Option<i32>,
    /// upload seconds left.
    #[serde(rename = "upload_seconds_left", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub upload_seconds_left: Option<Option<i32>>,
    /// API resource URL.
    #[serde(rename = "uri", skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    /// username
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    /// a URL to the website.
    #[serde(rename = "website", skip_serializing_if = "Option::is_none")]
    pub website: Option<String>,
    /// a custom title for the website.
    #[serde(rename = "website_title", skip_serializing_if = "Option::is_none")]
    pub website_title: Option<String>,
}

impl Me {
    /// SoundCloud Me object
    pub fn new() -> Me {
        Me {
            avatar_url: None,
            city: None,
            comments_count: None,
            country: None,
            created_at: None,
            description: None,
            discogs_name: None,
            first_name: None,
            followers_count: None,
            followings_count: None,
            full_name: None,
            id: None,
            kind: None,
            last_modified: None,
            last_name: None,
            likes_count: None,
            locale: None,
            online: None,
            myspace_name: None,
            permalink: None,
            permalink_url: None,
            plan: None,
            playlist_count: None,
            primary_email_confirmed: None,
            private_playlists_count: None,
            private_tracks_count: None,
            public_favorites_count: None,
            quota: None,
            reposts_count: None,
            subscriptions: None,
            track_count: None,
            upload_seconds_left: None,
            uri: None,
            username: None,
            website: None,
            website_title: None,
        }
    }
}

