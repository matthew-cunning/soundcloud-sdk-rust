/*
 * SoundCloud Public API Specification
 *
 * Swagger json can be found [here](https://developers.soundcloud.com/docs/api/explorer/api.json)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrackMetadataRequestTrack {
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "permalink", skip_serializing_if = "Option::is_none")]
    pub permalink: Option<String>,
    #[serde(rename = "sharing", skip_serializing_if = "Option::is_none")]
    pub sharing: Option<Sharing>,
    /// who can embed this track \"all\", \"me\", or \"none\"
    #[serde(rename = "embeddable_by", skip_serializing_if = "Option::is_none")]
    pub embeddable_by: Option<EmbeddableBy>,
    #[serde(rename = "purchase_url", skip_serializing_if = "Option::is_none")]
    pub purchase_url: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "genre", skip_serializing_if = "Option::is_none")]
    pub genre: Option<String>,
    /// The tag_list property contains a list of tags separated by spaces. Multiword tags are quoted in double quotes. We also support machine tags that follow the pattern NAMESPACE:KEY=VALUE. For example: geo:lat=43.555 camel:size=medium “machine:tag=with space” Machine tags are not revealed to the user on the track pages.
    #[serde(rename = "tag_list", skip_serializing_if = "Option::is_none")]
    pub tag_list: Option<String>,
    #[serde(rename = "label_name", skip_serializing_if = "Option::is_none")]
    pub label_name: Option<String>,
    #[serde(rename = "release", skip_serializing_if = "Option::is_none")]
    pub release: Option<String>,
    /// string, formatted as yyyy-mm-dd, representing release date
    #[serde(rename = "release_date", skip_serializing_if = "Option::is_none")]
    pub release_date: Option<String>,
    #[serde(rename = "streamable", skip_serializing_if = "Option::is_none")]
    pub streamable: Option<bool>,
    #[serde(rename = "downloadable", skip_serializing_if = "Option::is_none")]
    pub downloadable: Option<bool>,
    /// Possible values: no-rights-reserved, all-rights-reserved, cc-by, cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
    #[serde(rename = "license", skip_serializing_if = "Option::is_none")]
    pub license: Option<License>,
    #[serde(rename = "commentable", skip_serializing_if = "Option::is_none")]
    pub commentable: Option<bool>,
    #[serde(rename = "isrc", skip_serializing_if = "Option::is_none")]
    pub isrc: Option<String>,
}

impl TrackMetadataRequestTrack {
    pub fn new() -> TrackMetadataRequestTrack {
        TrackMetadataRequestTrack {
            title: None,
            permalink: None,
            sharing: None,
            embeddable_by: None,
            purchase_url: None,
            description: None,
            genre: None,
            tag_list: None,
            label_name: None,
            release: None,
            release_date: None,
            streamable: None,
            downloadable: None,
            license: None,
            commentable: None,
            isrc: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Sharing {
    #[serde(rename = "public")]
    Public,
    #[serde(rename = "private")]
    Private,
}

impl Default for Sharing {
    fn default() -> Sharing {
        Self::Public
    }
}
/// who can embed this track \"all\", \"me\", or \"none\"
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EmbeddableBy {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "me")]
    Me,
    #[serde(rename = "none")]
    None,
}

impl Default for EmbeddableBy {
    fn default() -> EmbeddableBy {
        Self::All
    }
}
/// Possible values: no-rights-reserved, all-rights-reserved, cc-by, cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum License {
    #[serde(rename = "no-rights-reserved")]
    NoRightsReserved,
    #[serde(rename = "all-rights-reserved")]
    AllRightsReserved,
    #[serde(rename = "cc-by")]
    CcBy,
    #[serde(rename = "cc-by-nc")]
    CcByNc,
    #[serde(rename = "cc-by-nd")]
    CcByNd,
    #[serde(rename = "cc-by-sa")]
    CcBySa,
    #[serde(rename = "cc-by-nc-nd")]
    CcByNcNd,
    #[serde(rename = "cc-by-nc-sa")]
    CcByNcSa,
}

impl Default for License {
    fn default() -> License {
        Self::NoRightsReserved
    }
}

